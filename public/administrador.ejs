<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modo administrador</title>
    <link rel="shortcut icon" href="/images/icono.png">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .product-card img {
            max-height: 200px;
            object-fit: cover;
        }

        .product-card {
            transition: transform 0.2s ease-in-out;
        }

        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
        }
    </style>

    </style>
    <!-- bootstrap css -->
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" href="/css/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/css/responsive.css">
    <!-- fevicon -->
    <link rel="icon" href="/images/fevicon.png" type="image/gif" />
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/css/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fancybox/2.1.5/jquery.fancybox.min.css"
        media="screen">
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script><![endif]-->
</head>

<body>
    <!-- loader  -->
    <div class="loader_bg">
        <div class="loader"><img src="/images/loading.gif" alt="#" /></div>
    </div>
    <!-- end loader -->

    <div class="banner_admin">
        <h1 class="text-center my-4">Gestión de Productos</h1>

        <!-- Formulario para agregar productos -->
        <div class="card mb-4">
            <div class="card-body">
                <h2 class="text-center mb-4">Agregar Nuevo Producto</h2>
                <form id="agregarForm">
                    <div class="mb-3">
                        <label class="form-label">Nombre del Producto</label>
                        <input name="nombre" type="text" class="form-control" id="nombre"
                            placeholder="Ejemplo: Tarjeta Gráfica RTX 3080" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Descripción</label>
                        <textarea name="descripcion" class="form-control" id="descripcion" rows="3" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Precio</label>
                        <input name="precio" type="number" class="form-control" id="precio" placeholder="Ejemplo: 15000"
                            required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Imagen del producto</label>
                        <input name="imagen" type="file" class="form-control" id="imagen" required>
                    </div>
                    <div class="text-center">
                        <button type="submit" class="btn btn-primary w-100">Agregar Producto</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Tabla para listar productos -->
        <div class="card">
            <div class="card-body">
                <h2 class="text-center mb-4">Lista de Productos</h2>
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Nombre</th>
                            <th>Descripción</th>
                            <th>Precio</th>
                            <th>Imagen</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody id="productosTable">
                        <!-- Aquí se cargarán los productos dinámicamente -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Modal para editar productos -->
    <div class="modal fade" id="modalEditar" tabindex="-1" aria-labelledby="modalEditarLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Editar Producto</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editarForm">
                        <input type="hidden" id="editarId">
                        <div class="mb-3">
                            <label class="form-label">Nombre</label>
                            <input type="text" class="form-control" id="editarNombre" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Descripción</label>
                            <textarea class="form-control" id="editarDescripcion" rows="3" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Precio</label>
                            <input 
                                type="number" 
                                step="0.01" 
                                min="0" 
                                class="form-control" 
                                id="editarPrecio">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Imagen</label>
                            <input type="file" class="form-control" id="editarImagen">
                            <div id="imagenPreviewContainer"></div> <!-- Aquí se agregará la vista previa -->
                        </div>
                        <div class="text-center">
                            <button type="submit" class="btn btn-success">Guardar Cambios</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    </section>
    </div>

    <!-- CKEditor -->
    <script src="https://cdn.ckeditor.com/4.22.0/standard/ckeditor.js"></script>
    <script src="js/jquery.min.js"></script>
    <script src="js/popper.min.js"></script>
    <script src="js/bootstrap.bundle.min.js"></script>
    <script src="js/jquery-3.0.0.min.js"></script>
    <!-- sidebar -->
    <script src="js/jquery.mCustomScrollbar.concat.min.js"></script>
    <script src="js/custom.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // Función para manejar el envío del formulario de edición
        document.getElementById('editarForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const id = document.getElementById('editarId').value;
            const formData = new FormData();

            formData.append('nombre', document.getElementById('editarNombre').value);
            formData.append('descripcion', document.getElementById('editarDescripcion').value);
            formData.append('precio', document.getElementById('editarPrecio').value);

            // Agregar la nueva imagen solo si se seleccionó una
            const imagenInput = document.getElementById('editarImagen');
            if (imagenInput.files[0]) {
                formData.append('imagen', imagenInput.files[0]);
            }

            try {
                const response = await fetch(`http://localhost:3000/api/editar/${id}`, {
                    method: 'PUT',
                    body: formData
                });

                if (response.ok) {
                    alert('Producto actualizado correctamente');
                    // Cerrar el modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('modalEditar'));
                    modal.hide();
                    // Recargar la lista de productos
                    cargarProductosEnTabla();
                } else {
                    const error = await response.text();
                    alert('Error al actualizar: ' + error);
                }
            } catch (err) {
                console.error('Error al editar producto:', err);
                alert('Error al editar el producto');
            }
        });
    </script>
    <script>
        // Función para cargar los datos del producto en el modal de edición
        async function cargarDatosProducto(id) {
    try {
        // Hacer la petición al endpoint para obtener los productos
        const response = await fetch('http://localhost:3000/api/productos_endpoint');

        if (!response.ok) {
            throw new Error('Error al obtener los productos');
        }

        const productos = await response.json();

        // Buscar el producto con el ID específico
        const producto = productos.find(p => p.id == id);

        if (!producto) {
            throw new Error('Producto no encontrado');
        }

        // Llenar el formulario de edición con los datos del producto
        document.getElementById('editarId').value = producto.id;
        document.getElementById('editarNombre').value = producto.nombre;
        document.getElementById('editarDescripcion').value = producto.descripcion;
        document.getElementById('editarPrecio').value = producto.precio;

        // Limpiar la vista previa de la imagen antes de agregar una nueva
        const imagenPreviewContainer = document.getElementById('imagenPreviewContainer');
        imagenPreviewContainer.innerHTML = ''; // Elimina cualquier vista previa previa

        // Crear la vista previa de la imagen
        const imagenPreview = document.createElement('div');
        imagenPreview.innerHTML = `
            <p>Imagen actual:</p>
            <img src="http://localhost:3000/uploads/${producto.imagen_url}" 
                alt="${producto.nombre}" 
                style="max-width: 100px; margin-bottom: 10px;">
            <p class="text-muted">Selecciona nueva imagen solo si deseas cambiarla</p>
        `;

        // Agregar la vista previa al contenedor
        imagenPreviewContainer.appendChild(imagenPreview);

        
        // Inicializar CKEditor en el campo de descripción
        CKEDITOR.replace('editarDescripcion');

    } catch (error) {
        console.error('Error al cargar datos del producto:', error);
        alert('Error al cargar los datos del producto: ' + error.message);
    }
}
    </script>
    <script>
        // Función para cargar los productos desde el backend
        async function cargarProductosEnTabla() {
            const tableBody = document.getElementById('productosTable');

            try {
                // Llamada al endpoint del backend
                const response = await fetch('http://localhost:3000/api/productos_endpoint');
                if (response.ok) {
                    const productos = await response.json();

                    tableBody.innerHTML = ''; // Limpiar el cuerpo de la tabla antes de agregar los productos
                    console.log('Productos recibidos:', productos);

                    productos.forEach(producto => {
                        const rowHTML = `
        <tr>
            <td>${producto.id}</td>
            <td>${producto.nombre}</td>
            <td>${producto.descripcion}</td>
            <td>$${producto.precio} MXN</td>
            <td>
                <img src="http://localhost:3000/uploads/${producto.imagen_url}" alt="${producto.nombre}" style="width: 100px; height: auto;">
            </td>
            <td>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalEditar" onclick="cargarDatosProducto(${producto.id})">Editar</button>
                <button class="btn btn-danger" onclick="eliminarProducto(${producto.id})">Eliminar</button>
            </td>
        </tr>
    `;
                        tableBody.innerHTML += rowHTML;
                    });

                } else {
                    console.error('Error al cargar los productos');
                }
            } catch (err) {
                console.error('Error al intentar cargar los productos:', err);
            }
        }

        // Llamar la función para cargar los productos cuando se cargue la página
        window.onload = cargarProductosEnTabla;
    </script>
    <script>
        // Función para eliminar un producto
        async function eliminarProducto(id) {
            if (!confirm(`¿Estás seguro de que deseas eliminar el producto con ID ${id}?`)) {
                return;
            }

            try {
                const response = await fetch(`http://localhost:3000/api/eliminar/${id}`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                });

                if (response.ok) {
                    const data = await response.json();
                    alert(data.message);
                    cargarProductosEnTabla();  // Recargar la tabla después de eliminar
                } else {
                    const errorData = await response.json();
                    alert(`Error: ${errorData.message}`);
                }

            } catch (error) {
                console.error('Error al eliminar producto:', error);
                alert('Error al eliminar el producto');
            }
        }
    </script>


    <script>
        function openNav() {
            document.getElementById("mySidepanel").style.width = "250px";
        }

        function closeNav() {
            document.getElementById("mySidepanel").style.width = "0";
        }
    </script>

    <!-- script registro de productos -->
    <script>
        document.getElementById('agregarForm').addEventListener('submit', async (e) => {
            e.preventDefault(); // Previene la recarga de la página

            // Obtener los datos del formulario
            const formData = new FormData(e.target);

            try {
                const response = await fetch('http://localhost:3000/api/agregar', {
                    method: 'POST',
                    body: formData, // Enviar FormData en lugar de JSON
                });

                if (response.ok) {
                    alert('Producto agregado exitosamente');
                    e.target.reset();
                } else {
                    const error = await response.text();
                    alert('Error: ' + error);
                }
            } catch (err) {
                console.error('Error al intentar agregar producto:', err);
                alert('Ocurrió un problema al agregar el producto.');
            }
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
    CKEDITOR.replace('descripcion');
});
    </script>
</body>

</html>